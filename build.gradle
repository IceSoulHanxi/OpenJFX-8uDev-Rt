import java.util.concurrent.Executors
import java.util.concurrent.ForkJoinPool
import java.util.concurrent.TimeUnit

/**
 * The main build script for JavaFX.
 *
 * Tasks to complete:
 *  - special tasks for common needs, such as:
 *      - updating copyright headers
 *      - stripping trailing whitespace (?)
 *  - checkstyle
 *  - findbugs
 *  - re needs?
 *  - testing
 *  - build check -- making sure the final artifact has the right bits
 *  - API change check
 *  - JavaDoc
 *  - Pushing results to a repo?
 *  - VersionInfo needs to be parameterized so hudson can produce valid values
 *  - partial builds for compileXXX shaders isn't working (they also get compiled)
 *  - ServiceWithSecurityManagerTest fails to complete when run from gradle.
 *  - Integrate Parfait reports for C code
 */
defaultTasks = ["assemble"]

/******************************************************************************
 *        Utility methods, variables                                          *
 *****************************************************************************/
def OS_NAME = System.properties["os.name"].toLowerCase();
def isMac = OS_NAME.contains("mac") || OS_NAME.contains("darwin")
def isWindows = OS_NAME.contains("windows")
def isLinux = OS_NAME.contains("linux")

def JAVA_HOME = System.getProperty("java.home")
def JDK_HOME = System.getenv().containsKey("JDK.HOME") ?
    System.getenv("JDK.HOME") :
    JAVA_HOME.endsWith("/jre") ? JAVA_HOME.substring(0, JAVA_HOME.length() - 4) : JAVA_HOME;
def JFXRT = System.getenv().containsKey("JFXRT") ?
    System.getenv("JFXRT") :
    JDK_HOME + "/jre/lib/jfxrt.jar"; // Note that b75+ of Java 8 puts this in a different location!

// TODO log the JAVA_HOME, JDK_HOME, and JFXRT, as well as the platform (isMac, isWindows, isLinux, OS_NAME, etc)

// TODO Verify the /include and if on mac /include/darwin directories exist as expected under JDK.HOME

// ENV has:
//   JAVA_ARCH
// Can also get JAVA_HOME, JDK_HOME, etc IFF the environment variables are set
//println System.getenv();
// Properties has:
//   os.arch
//   java.specification.version
//   java.vm.specification.version
//   java.runtime.version
//   file.separator
//   os.name
//   path.separator
//
//println System.getProperties()

def swtFileName = { ->
    String fileName = "";
    if (isMac) {
        fileName = "org.eclipse.swt.cocoa.macosx.x86_64_3.7.2.v3740f.jar"
    } else if (isWindows) {
        fileName = "org.eclipse.swt.win32.win32.x86_3.7.2.v3740f.jar"
//                fileName = "org.eclipse.swt.win32.win32.x86_64_3.7.2.v3740f.jar"
    } else if (isLinux) {
        fileName = "org.eclipse.swt.gtk.linux.x86_3.7.2.v3740f.jar"
//                fileName = "org.eclipse.swt.gtk.linux.x86_64_3.7.2.v3740f.jar"
    }
    return fileName;
}

/******************************************************************************
 *        Project definitions (dependencies, etc)                             *
 *****************************************************************************/

allprojects {
    // All of our projects are java projects
    apply plugin: "java"
    sourceCompatibility = 1.8
    // At the moment the ASM library shipped with Gradle that is used to
    // discover the different test classes fails on Java 8, so in order
    // to have sourceCompatibility set to 1.8 I have to also turn scanForClasses off
    // and manually specify the includes / excludes
    test {
        enableAssertions = true
        testLogging.exceptionFormat = "full"
        scanForTestClasses = false
        include '**/*Test.*'
        exclude '**/*Abstract*.*'
    }
    // The following block is a workaround for the fact that presently Gradle
    // can't set the -XDignore.symbol.file flag, because it appears that the
    // Javac API is lacking support for it. So what we'll do is find any Compile
    // task and manually provide the options necessary to fire up the
    // compiler with the right settings.
    //
    // Also, we need to remove jfxrt.jar from the boot classpath (if it is there)
    // and instead each module that depends on closed bits is going to need to
    // add JFXRT to its list of dependencies.
    tasks.withType(Compile) { compile ->
        compile.options.bootClasspath = JDK_HOME + "/jre/lib/rt.jar"
        compile.options.compilerArgs = ["-XDignore.symbol.file"]
        compile.options.debug = true
        compile.options.fork = true
        compile.options.forkOptions.executable = System.env["JAVA_HOME"] ? System.env["JAVA_HOME"] + "/bin/javac" : "javac"
        compile.options.warnings = false
    }
    // Setup the repositories that we'll download libraries from. Maven Central is
    // just easy for most things. The custom "ivy" repo is for downloading SWT
    repositories {
        mavenCentral()
        ivy {
            url "http://download.eclipse.org/eclipse/updates/3.7/R-3.7.2-201202080800/plugins/"
            layout "pattern", {
                artifact "[artifact]"
            }
        }
    }
}

// The build-tools project contains the annotation processor that is used to generate the
// builders, the decora compiler used for effects, and various annotations we use for FXML
// etc. Nothing in build-tools should *ever* be shipped with the runtime.
project(":build-tools") {
    // Workaround for lack of Antrl 3 support in Gradle. By defining a configuration,
    // we can then give it a class path and use that classpath to execute a java command
    configurations {
        antlr3
    }

    dependencies {
        compile "org.antlr:antlr-runtime:3.4"
        antlr3 "org.antlr:antlr-runtime:3.4"
        antlr3 "org.antlr:stringtemplate:4.0.2@jar"
        antlr3 "org.antlr:antlr:3.4@jar"
        testCompile "junit:junit:4.8.2"
    }

    task generateGrammarSource(type: JavaExec) {
        // TODO need to fix bootclasspath
        description = "Generate JSL parser from Antlr3 grammars"
        def dest = "build/generated-src/antlr/com/sun/scenario/effect/compiler"
        def src = "src/main/antlr"
        inputs.dir file(src)
        outputs.dir file(dest)
        def grammars = fileTree(src).include("**/*.g")
        main = "org.antlr.Tool"
        classpath = configurations.antlr3
        args = ["-o", dest, grammars.files].flatten()
    }

    compileJava {
        dependsOn generateGrammarSource
        source "build/generated-src/antlr/com/sun/scenario/effect/compiler"
    }
}

// The "base" project is our first module and the most basic one required for
// all other modules. It is useful even for non-GUI applications.
project(":base") {
    dependencies {
        compile project(":build-tools")
        testCompile "junit:junit:4.8.2"
    }

    // We need to take the VersionInfo.java file and replace the various
    // properties within it
    mkdir "build/generated-src/version-info" // TODO Ought to be done during processing not dep analysis phase
    def replacements = [BUILD_TIMESTAMP: new java.util.Date(),
        HUDSON_JOB_NAME: "not_hudson",
        HUDSON_BUILD_NUMBER: "0000",
        PROMOTED_BUILD_NUMBER: "00",
        PRODUCT_NAME: "javafx", // OpenJFX
        RAW_VERSION: "8.0.0",
        RELEASE_NAME: "8.0",
        RELEASE_MILESTONE: "ea"];
    task processVersion(type: Copy, description: "Replace params in VersionInfo and copy file to destination") {
        from "src/main/version-info"
        into "build/generated-src/version-info/com/sun/javafx/runtime"
        filter {line->
            replacements.each() {k, v ->
                line = line.replace("@${k}@", v.toString());
            }
            line
        }
    }

    // Make sure to include build/generated-src/version-info that we previously created.
    // We DO NOT want to include src/main/version-info
    sourceSets.main.java.srcDirs = ["src/main/java", "build/generated-src/version-info"]
    compileJava.dependsOn processVersion
}

// The graphics module is needed for any graphical JavaFX application. It requires
// the base module and includes the scene graph, layout, css, prism, windowing, etc.
// This is a fairly complicated module. There are many different types of native components
// that all need to be compiled.
project(":graphics") {
    sourceSets.main.java.srcDirs = ["src/main/java", "src/main/dt", "src/main/jsl-generator"]

    dependencies {
        compile project(":base"), project(":build-tools")
        compile ":$swtFileName:"
        compile files(rootDir.toString() + "/../crap/plugin_exports.jar", JFXRT)
        testCompile "junit:junit:4.8.2"
    }

    test {
        forkEvery = 1
    }
}

project(":controls") {
    dependencies {
        compile project(":build-tools"), project(":base"), project(":graphics")
    }
}

project(":swing") {
    dependencies {
        compile project(":build-tools"), project(":base"), project(":graphics")
    }
}

project(":swt") {
    dependencies {
        compile project(":build-tools"), project(":base"), project(":graphics")
        compile ":$swtFileName:"
    }
}

//project(":web") {
//    dependencies {
//        compile project(":build-tools"), project(":base"), project(":graphics"),
//                project(":controls"), /*project(":media"),*/ project(":swt"), project(":swing")
//    }
//}
//
//project(":fxml") {
//    dependencies {
//        compile project(":build-tools"), project(":base"), project(":graphics"),
//                project(":controls"), /*project(":media"),*/ project(":web"), project(":swt"), project(":swing")
//    }
//}

project(":designTime") {
    dependencies {
        compile project(":graphics"), project(":controls")
    }
}

project(":graphics:native") {
    dependencies {
        compile project(":graphics")
    }

    task compileDecoraSSENative(type:Exec, dependsOn:configurations.compile) {
        inputs.dir "src/main/decora-sse-native"
        outputs.dir "build/main/decora-sse-native"
        outputs.dir "build/libs"
        workingDir "src/main/decora-sse-native"
        environment([
                "BUILD_DIR"            : "../../../build/main/decora-sse-native",
                "DIST_DIR"             : "../../../build/libs",
                "DECORA_SSE_CLASS_DIR" : "../../../../build/classes/main",
                "DECORA_DEP_CP"        : "../../../../build/classes/main",
                "DECORA_GEN_CPP"       : "build/generated-src"
        ])
        commandLine "make"
    }

    task compilePrismCommon(type:Exec, dependsOn:configurations.compile) {
        inputs.dir "src/main/prism-common-native"
        outputs.dir "build/main/prism-common-native"
        outputs.dir "build/libs"
        workingDir "src/main/prism-common-native"
        environment([
                "BUILD_DIR"      : "../../../build/main/prism-common-native",
                "DIST_DIR"       : "../../../build/libs",
                "PRISM_COM_CP"   : "../../../../build/classes/main",
                "JAVAFX_GEOM_CP" : "../../../../build/classes/main",
        ])
        commandLine "make"
    }

    task compilePrismSW(type:Exec, dependsOn:configurations.compile) {
        inputs.dir "src/main/prism-sw-native"
        outputs.dir "build/main/prism-sw-native"
        outputs.dir "build/libs"
        workingDir "src/main/prism-sw-native"
        environment([
                "BUILD_DIR"            : "../../../build/main/prism-sw-native",
                "DIST_DIR"             : "../../../build/libs",
                "PRISM-SW_CP"          : "../../../../build/classes/main",
        ])
        commandLine "make"
    }
    classes.dependsOn compileDecoraSSENative, compilePrismCommon, compilePrismSW
}

project(":graphics:effects-jsl") {
    dependencies {
        compile project(":graphics")
    }

    task compileJSL(description: "Compile Java Shader Language (JSL) files") { }
    classes.dependsOn compileJSL

    [[fileName: "ColorAdjust", generator: "CompileJSL", outputs: "-all"],
            [fileName: "Brightpass", generator: "CompileJSL", outputs: "-all"],
            [fileName: "SepiaTone", generator: "CompileJSL", outputs: "-all"],
            [fileName: "PerspectiveTransform", generator: "CompileJSL", outputs: "-all"],
            [fileName: "DisplacementMap", generator: "CompileJSL", outputs: "-all"],
            [fileName: "InvertMask", generator: "CompileJSL", outputs: "-all"],
            [fileName: "Blend", generator: "CompileBlend", outputs: "-all"],
            [fileName: "PhongLighting", generator: "CompilePhong", outputs: "-all"],
            [fileName: "LinearConvolve", generator: "CompileLinearConvolve", outputs: "-hw"],
            [fileName: "LinearConvolveShadow", generator: "CompileLinearConvolve", outputs: "-hw"]].each { settings ->
        task "compile$settings.fileName"(dependsOn: compileJava, type: JavaExec) {
            // TODO need to fix bootclasspath
            description = "Generate $settings.fileName shader from JSL"
            mkdir "modules/graphics/effects-jsl/build/generated-src/jsl"
            def destinationDir = "build/generated-src/jsl"
            def sourceDir = "src/main/java"
            inputs.file file("${sourceDir}/${settings.fileName}.jsl")
            outputs.file files(
                    "${destinationDir}/decora-d3d/build/gensrc/com/sun/scenario/effect/impl/hw/d3d/hlsl/${settings.fileName}.hlsl",
                    "${destinationDir}/decora-es2/build/gensrc/com/sun/scenario/effect/impl/es2/glsl/${settings.fileName}.frag",
                    "${destinationDir}/decora-jsw/build/gensrc/com/sun/scenario/effect/impl/sw/java/JSW${settings.fileName}.java",
                    "${destinationDir}/decora-prism-ps/build/gensrc/com/sun/scenario/effect/impl/prism/ps/PPS${settings.fileName}.java",
                    "${destinationDir}/decora-sse/build/gensrc/com/sun/scenario/effect/impl/sw/sse/SSE${settings.fileName}.java",
                    "${destinationDir}/decora-sse-native/build/gensrc/SSE${settings.fileName}.cc")
            main = settings.generator
            classpath = configurations.compile
            classpath += files("modules/graphics/effects-jsl/build/classes/main")
            args = ["-i", sourceDir, "-o", destinationDir, "-pkg", "com/sun/scenario/effect", "$settings.outputs", "$settings.fileName"].flatten()
        }
        compileJSL.dependsOn "compile$settings.fileName"
    }

    task compileDecoraJava(dependsOn: compileJSL, type: JavaCompile) {
        description = "Compile Java-based Decora-JSL files"
        classpath = configurations.compile
        source = ["build/generated-src/jsl/decora-jsw/build/gensrc",
                "build/generated-src/jsl/decora-prism-ps/build/gensrc",
                "build/generated-src/jsl/decora-sse/build/gensrc"]
        destinationDir = file("build/classes/main")
    }
    classes.dependsOn compileDecoraJava

    task copyShaders(dependsOn: compileJSL, type: Copy, description: "Copy hlsl / frag shaders to build/resources/main") {
        from("build/generated-src/jsl/decora-d3d/build/gensrc") {
            include "**/*.hlsl"
        }
        from("build/generated-src/jsl/decora-es2/build/gensrc") {
            include("**/*.frag")
        }

        into "build/resources/main"
    }
    processResources.dependsOn copyShaders
}

project(":graphics:prism-jsl") {
    dependencies {
        compile project(":graphics")
    }

    task compileJSL(description: "Compile Java Shader Language (JSL) files") {}
    classes.dependsOn compileJSL

    def destDir = "build/generated-src/jsl"
    def sourceDir = "src/main/java"
    def inputFiles = fileTree(dir: sourceDir)
    inputFiles.include "**/*.jsl"

    inputFiles.each { file ->
        task "compile$file"(type: JavaExec) {
            // TODO need to fix bootclasspath
            dependsOn compileJava;
            dependsOn processResources;
            mkdir "modules/graphics/prism-jsl/build/generated-src/jsl"
            inputs.file file
            outputs.dir files(
                    "${destDir}/prism-d3d/build/gensrc/com/sun/prism/d3d/hlsl/",
                    "${destDir}/prism-es2/build/gensrc/com/sun/prism/es2/glsl/",
                    "${destDir}/prism-ps/build/gensrc/com/sun/prism/shader/")
            main = "CompileJSL"
            classpath = configurations.compile
            classpath += files("modules/graphics/prism-jsl/build/classes/main", "modules/graphics/prism-jsl/build/resources/main")
            args = ["-i", sourceDir, "-o", destDir, "-pkg", "com/sun/prism", "-d3d", "-es2", "-name", "$file"].flatten()
            maxHeapSize = "256m"
        }
        compileJSL.dependsOn "compile$file"
    }

    task compilePrismJSLJava(dependsOn: compileJSL, type: JavaCompile) {
        description = "Compile Java-based Prism-JSL files"
        classpath = configurations.compile
        source = "build/generated-src/jsl/prism-ps/build/gensrc"
        destinationDir = file("build/classes/main")
    }
    classes.dependsOn compilePrismJSLJava

    task copyPrismShaders(dependsOn: compileJSL, type: Copy, description: "Copy hlsl / frag shaders to build/resources/main") {
        from("build/generated-src/jsl/prism-d3d/build/gensrc") {
            include "**/*.hlsl"
        }
        from("build/generated-src/jsl/prism-es2/build/gensrc") {
            include("**/*.frag")
        }

        into "build/resources/main"
    }
    classes.dependsOn copyPrismShaders
}

