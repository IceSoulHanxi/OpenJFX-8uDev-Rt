/*
 * Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
// Declare whether this particular target file applies to the current system
ext.LINUX_CAN_BUILD = IS_LINUX;
if (!LINUX_CAN_BUILD) return;

// All desktop related packages should be built
ext.LINUX_COMPILE_SWING = true;
ext.LINUX_COMPILE_SWT = true;
ext.LINUX_COMPILE_FXPACKAGER = true;
ext.LINUX_COMPILE_DESIGN_TIME = true;

// Libraries end up in the sdk/rt/lib/$OS_ARCH directory for Linux
ext.LINUX_LIB_DEST = "lib/$OS_ARCH"

// TODO this is garbage. Each target file should define what it includes,
// not what it excludes.
ext.LINUX_JFXRT_JAR_EXCLUDES = [
    "**/*.hlsl",
    "com/sun/glass/ui/win",
    "com/sun/glass/ui/accessible/win",
    "com/sun/prism/d3d",
    "com/sun/prism/es2/gl/win",
    "com/sun/prism/null3d",
    "com/sun/scenario/effect/impl/hw/d3d",
    
    "com/sun/glass/events/mac",
    "com/sun/glass/ui/mac",
    "com/sun/glass/ui/accessible/mac",
    "com/sun/prism/es2/gl/mac",
        
    "com/sun/glass/ui/ios",
    
    "com/sun/glass/ui/lens",
    "com/sun/prism/es2/gl/eglfb",
    "com/sun/prism/es2/gl/eglx11",
    "com/sun/prism/es2/gl/x11",
    
    "com/sun/glass/ui/swt", // SWT glass
]

// A set of common parameters to use for both compiling and linking
def commonFlags = [
        "-fno-strict-aliasing", "-fPIC", "-fno-omit-frame-pointer", // optimization flags
        "-W", "-Wall", "-Wno-unused", "-Wno-parentheses", "-Werror=implicit-function-declaration"] // warning flags

// Specify the compilation parameters and link parameters
def ccFlags = [
        commonFlags, "-I$JDK_HOME/include", "-I$JDK_HOME/include/linux", "-c",
        IS_DEBUG ? ["-ggdb", "-DVERBOSE"] : "-O2", "-DINLINE=inline"].flatten()
//ccFlags.addAll(["-Wnon-virtual-dtor", "-Woverloaded-virtual", "-std=c++0x"])
def linkFlags = ["-shared", commonFlags].flatten()

// Create $buildDir/linux_tools.properties file and load props from it
setupTools("linux_tools",
    { propFile ->
        ByteArrayOutputStream results = new ByteArrayOutputStream();
        exec {
            commandLine("pkg-config", "--cflags", "gtk+-2.0", "gthread-2.0", "xtst");
            setStandardOutput(results);
        }
        propFile << "cflags=" << results.toString().trim() << "\n";

        results = new ByteArrayOutputStream();
        exec {
            commandLine "pkg-config", "--libs", "gtk+-2.0", "gthread-2.0", "xtst"
            standardOutput = results
        }
        propFile << "libs=" << results.toString().trim();
    },
    { properties ->
        ccFlags.addAll(properties.getProperty("cflags").split(" "))
        linkFlags.addAll(properties.getProperty("libs").split(" "))
    }
)

def COMPILER = "gcc"
def LINKER = "g++"

ext.LINUX_GLASS_JAVAH_INCLUDE = [
    "com/sun/glass/events/**",
    "com/sun/glass/ui/*",
    "com/sun/glass/ui/gtk/*",
    "com/sun/glass/ui/accessible/gtk/*"]
ext.LINUX_GLASS_NATIVE_SOURCE = file("modules/graphics/src/main/native-glass/gtk")
ext.LINUX_GLASS_COMPILER = COMPILER
ext.LINUX_GLASS_CC_FLAGS = [ccFlags].flatten()
ext.LINUX_GLASS_LINKER = LINKER
ext.LINUX_GLASS_LINK_FLAGS = [linkFlags].flatten()

ext.LINUX_DECORA_COMPILER = COMPILER
ext.LINUX_DECORA_CC_FLAGS = [ccFlags, "-ffast-math"].flatten()
ext.LINUX_DECORA_LINKER = LINKER
ext.LINUX_DECORA_LINK_FLAGS = [linkFlags].flatten()

ext.LINUX_PRISM_COMMON_JAVAH_INCLUDE = ["com/sun/prism/impl/**/*", "com/sun/prism/PresentableState*"]
ext.LINUX_PRISM_COMMON_NATIVE_SOURCE = file("modules/graphics/src/main/native-prism")
ext.LINUX_PRISM_COMMON_COMPILER = "cc"
ext.LINUX_PRISM_COMMON_CC_FLAGS = [ccFlags].flatten()
ext.LINUX_PRISM_COMMON_LINKER = LINKER
ext.LINUX_PRISM_COMMON_LINK_FLAGS = [linkFlags].flatten()

ext.LINUX_PRISM_SW_JAVAH_INCLUDE = ["com/sun/pisces/**/*"]
ext.LINUX_PRISM_SW_NATIVE_SOURCE = file("modules/graphics/src/main/native-prism-sw")
ext.LINUX_PRISM_SW_COMPILER = "cc"
ext.LINUX_PRISM_SW_CC_FLAGS = [ccFlags].flatten()
ext.LINUX_PRISM_SW_LINKER = LINKER
ext.LINUX_PRISM_SW_LINK_FLAGS = [linkFlags].flatten()

ext.LAUNCHER_COMPILER = COMPILER
ext.LAUNCHER_CC_FLAGS = ["-DJAVAARCH=\"$OS_ARCH\"", "-I$JDK_HOME/include", "-I$JDK_HOME/include/linux"];
ext.LAUNCHER_LINKER = LINKER
ext.LAUNCHER_LINK_FLAGS = ["-ldl"]

def closedDir = file("$projectDir/../rt-closed")
ext.LINUX_JAVAFX_FONT_JAVAH_INCLUDE = ["com/sun/javafx/font/*", "com/sun/javafx/text/*", "com/sun/t2k/*"]
ext.LINUX_JAVAFX_FONT_NATIVE_SOURCE = [
    file("$closedDir/javafx-font-native/src"),
    file("$closedDir/javafx-font-native/src/layout"),
    file("$closedDir/javafx-font-native/src/layoutfx")]
ext.LINUX_JAVAFX_FONT_COMPILER = COMPILER
ext.LINUX_JAVAFX_FONT_CC_FLAGS = ["-DJFXFONT_PLUS", ccFlags].flatten()
ext.LINUX_JAVAFX_FONT_LINKER = LINKER
ext.LINUX_JAVAFX_FONT_LINK_FLAGS = [linkFlags].flatten()

ext.LINUX_IIO_JAVAH_INCLUDE = ["com/sun/javafx/iio/**/*"]
ext.LINUX_IIO_NATIVE_SOURCE = [
    file("modules/graphics/src/main/native-iio"),
    file("modules/graphics/src/main/native-iio/libjpeg7")]
ext.LINUX_IIO_COMPILER = COMPILER
ext.LINUX_IIO_CC_FLAGS = [ccFlags].flatten()
ext.LINUX_IIO_LINKER = LINKER
ext.LINUX_IIO_LINK_FLAGS = [linkFlags].flatten()

ext.LINUX_PRISM_ES2_JAVAH_INCLUDE = ["com/sun/prism/es2/**/*"]
ext.LINUX_PRISM_ES2_NATIVE_SOURCE = [
    file("modules/graphics/src/main/native-prism-es2"),
    file("modules/graphics/src/main/native-prism-es2/GL"),
    file("modules/graphics/src/main/native-prism-es2/x11")
]
ext.LINUX_PRISM_ES2_COMPILER = COMPILER
ext.LINUX_PRISM_ES2_CC_FLAGS = ["-DLINUX", "-DGRADLE_BUILD", ccFlags].flatten()
ext.LINUX_PRISM_ES2_LINKER = LINKER
ext.LINUX_PRISM_ES2_LINK_FLAGS = [linkFlags].flatten()

/******************************************************************************
 *                                                                            *
 *                         Build Setup Sanity Checks                          *
 *                                                                            *
 *****************************************************************************/

if (!IS_LINUX) throw new Exception("Must be on Linux to compile for Linux");
