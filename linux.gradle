// A set of common parameters to use for both compiling and linking
def commonParams = [
        "-fno-strict-aliasing", "-fPIC", "-fno-omit-frame-pointer", // optimization params
        "-W", "-Wall", "-Wno-unused", "-Wno-parentheses", "-Werror=implicit-function-declaration"] // warning params

// Specify the compilation parameters and link parameters
ext.CC_PARAMS = [
        commonParams, "-I$JDK_HOME/include", "-I$JDK_HOME/include/linux", "-c",
        IS_DEBUG ? ["-ggdb", "-DVERBOSE"] : ["-O2", "-ffast-math"], "-DINLINE=inline"].flatten()
//CC_PARAMS.addAll(["-Wnon-virtual-dtor", "-Woverloaded-virtual", "-std=c++0x"])
ext.LINK_PARAMS = ["-shared", commonParams].flatten()

// Check to see whether $buildDir/linux_tools.properties file exists. If not, then generate it.
// Once generated, we need to read the properties file to help us define the defaults for this
// block of properties
File linux_tools = file("$buildDir/linux_tools.properties");
if (!linux_tools.exists()) {
    // Create the properties file
    linux_tools.getParentFile().mkdirs();
    linux_tools.createNewFile();
    ByteArrayOutputStream results = new ByteArrayOutputStream();
    exec {
        commandLine("pkg-config", "--cflags", "gtk+-2.0", "gthread-2.0", "xtst");
        setStandardOutput(results);
    }
    linux_tools << "cflags=" << results.toString().trim() << "\n";

    results = new ByteArrayOutputStream();
    exec {
        commandLine "pkg-config", "--libs", "gtk+-2.0", "gthread-2.0", "xtst"
        standardOutput = results
    }
    linux_tools << "libs=" << results.toString().trim();
}

// Try reading the properties in order to define the properties. If the property file cannot
// be located, then we will throw an exception because we cannot guess these values
InputStream linux_tools_stream = null;
try {
    Properties linux_tools_properties = new Properties();
    linux_tools_stream = new FileInputStream(linux_tools);
    linux_tools_properties.load(linux_tools_stream);
    CC_PARAMS.addAll(linux_tools_properties.getProperty("cflags").split(" "))
    LINK_PARAMS.addAll(linux_tools_properties.getProperty("libs").split(" "))
} finally {
    try { linux_tools_stream.close() } catch (Exception e) { }
}