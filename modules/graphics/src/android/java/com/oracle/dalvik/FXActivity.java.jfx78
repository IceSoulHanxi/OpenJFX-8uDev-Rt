package com.oracle.dalvik;

import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Map.Entry;
import java.util.Properties;

import android.app.Activity;
import android.content.Context;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Configuration;
import android.graphics.PixelFormat;
import android.os.Bundle;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.FrameLayout;

public class FXActivity extends Activity implements SurfaceHolder.Callback, SurfaceHolder.Callback2 {

	private static final String TAG = "FXActivity";
	
	private static final String JAVAFX_APPLICATION_APPLICATION = "javafx.application.Application";

	private static final String COM_SUN_JAVAFX_APPLICATION_LAUNCHERIMPL = "com.sun.javafx.application.LauncherImpl";

	private static final String LAUNCH_APPLICATION_METHOD = "launchApplication";

	private static final String MAIN_METHOD = "main";

	private static final Class[] LAUNCH_APPLICATION_ARGS = new Class[] {
			Class.class, Class.class, (new String[0]).getClass() };

	private static final Class[] MAIN_METHOD_ARGS = new Class[] { 
			(new String[0]).getClass() };

//	private static final String JFX_APPLICATION_ATTRIBUTE = "JavaFX-Application-Class";
    private static final String META_DATA_MAIN_CLASS = "main.class";
	private static final String JFX_PRELOADER_ATTRIBUTE = "preloader.class";
//	private static final String JFX_MAIN_ATTRIBUTE = "main.class";
    private static final String GLASS_LENS_ANDROID = "glass_lens_android";
	

	private static int orientation;		
//	private static FXActivity instance;
	private static boolean fxApplicationLaunched = false;
	private static boolean fxApplicationLaunching = false;
	
    private static FXActivity instance;
    private static FrameLayout mViewGroup;
    private static SurfaceView mView;

    private String            appDataDir;
    private String            storageDir;    
    private NativePipeReader  reader;
    private InputMethodManager imm;   
    private String ldPath;
    
	public FXActivity() {
		super();
		
		Properties userProperties = new Properties();
//		try {
//			userProperties.load(FXActivity.class.getResourceAsStream("/javafx.platform.properties"));
//			for(Entry<Object, Object> e:userProperties.entrySet()) {
//				System.setProperty((String)e.getKey(), (String)e.getValue());
//			}
//			System.getProperties().list(System.out);
//			
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
	}
	
//	public static FXActivity getInstance() {
//		if (instance == null) {
//			System.err.println("Activity not initialized.");
//		}
//		return instance;
//	}
	
	@Override
	public void onCreate(final Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		
		//DEBUGGING
		//Debug.waitForDebugger();										
		//DEBUGGING
		
//        FXActivity.instance = this;    
        
        getWindow().requestFeature(Window.FEATURE_NO_TITLE);
        getWindow().setSoftInputMode(
                WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED
                | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING);
        getWindow().setFormat(PixelFormat.RGBA_8888);

        imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);

        mView = new FXActivity.InternalSurfaceView(this);
        mView.getHolder().addCallback(this);        
        mViewGroup = new FrameLayout(this);
        mViewGroup.addView(mView);
        setContentView(mViewGroup);
        instance = this;        
        System.loadLibrary(GLASS_LENS_ANDROID);
//        System.loadLibrary(ANDROID_WEBVIEW);
        
        //AndroidViewGroup is FrameLayout and holds GLSurfaceView. 
//        setContentView(AndroidViewGroup.getInstance());
    	
        //launch main class
    	launchFXApplication();
	}
	
    public static FXActivity getInstance() {
        return instance;
    }

    public String getLDPath() {
        if (appDataDir == null) {
            appDataDir = this.getApplicationInfo().dataDir;
        }
        if (ldPath == null) {
            ldPath = appDataDir + "/lib";
        }
        return ldPath;
    }

    public static ViewGroup getViewGroup() {
        return mViewGroup;
    }    
	
    @Override
    public void surfaceCreated(SurfaceHolder holder) {
            _surfaceChanged(holder.getSurface());
    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width,
                    int height) {
            _surfaceChanged(holder.getSurface(), format, width, height);

    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
            _surfaceChanged(null);
    }

    @Override
    public void surfaceRedrawNeeded(SurfaceHolder holder) {
            _surfaceRedrawNeeded(holder.getSurface());		
    }

    private native void _surfaceChanged(Surface surface);

    private native void _surfaceChanged(Surface surface, int format, int width, int height);

    private native void _surfaceRedrawNeeded(Surface surface);

    private void showIME() {
        mView.requestFocus();
        imm.showSoftInput(mView, 0);
    }

    private void hideIME() {
        mView.requestFocus();
        imm.hideSoftInputFromWindow(mView.getWindowToken(), 0);
    }
    
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
//		if (newConfig.orientation != FXActivity.orientation) {
//			Log.d(TAG, "orientation has changed");
//			AndroidApplication.getInstance().notifyScreenSettingsChanged();
//		}
	}
	
	@Override
	protected void onStart() {
		super.onStart();
		Log.d("onStart", "Activity started");
//		Configuration startingConfiguration = getResources().getConfiguration();
//		orientation = startingConfiguration.orientation;
	}
	
	@Override
	protected void onPause() {		
		super.onPause();
		Log.d("onPause", "Activity paused");
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		Log.d("onResume", "Activity resumed");
	}
	
	@Override
	protected void onStop() {
		super.onStop();
		Log.d("onStop", "Activity stoped");
	}
	
	@Override
	protected void onRestart() {
		super.onRestart();
		Log.d("onRestart", "Activity re-started");
	}
	
	public void launchFXApplication() {
	    try {
			final Class applicationClass = resolveApplicationClass();
			final Class preloaderClass = resolvePreloaderClass();
			final Class javafxApplicationClass = Class.forName(JAVAFX_APPLICATION_APPLICATION);
			final Class javafxLauncherClass = Class.forName(COM_SUN_JAVAFX_APPLICATION_LAUNCHERIMPL);
	
			final Method launchMethod = javafxLauncherClass.getMethod(
					LAUNCH_APPLICATION_METHOD, LAUNCH_APPLICATION_ARGS);
						
			
			new Thread(new Runnable() {
				public void run() {
					fxApplicationLaunching = true;					
					try {
						if (javafxApplicationClass.isAssignableFrom(applicationClass)) {
							launchMethod.invoke(null, new Object[] {
									applicationClass, preloaderClass,
									new String[] {} });
						} else {
							Method mainMethod = applicationClass.getMethod(
									MAIN_METHOD, MAIN_METHOD_ARGS);
							mainMethod.invoke(null,
									new Object[] { new String[] {} });
						}
					} catch (Exception e) {
						e.printStackTrace();
					}
					fxApplicationLaunched = true;
					fxApplicationLaunching = false;
				}
			}, "Prelauncher Thread").start();
	
		} catch (Exception e) {
			e.printStackTrace();
		}
    }
    
    private Bundle getMetadata() {
        try {
            ActivityInfo ai = FXActivity.this.getPackageManager().getActivityInfo(
                    getIntent().getComponent(), PackageManager.GET_META_DATA);
            return ai.metaData;

        } catch(NameNotFoundException e) {
            throw new RuntimeException("Error getting activity info", e);
        }
    }
    
    private Class resolveApplicationClass()
			throws NameNotFoundException, ClassNotFoundException {

		Class clazz = null;
//		String applicationClassName = getPackageManager().getActivityInfo(
//				new ComponentName(this, getClass()),
//				PackageManager.GET_META_DATA).metaData
//				.getString(JFX_APPLICATION_ATTRIBUTE);
        String applicationClassName = getMetadata().getString(META_DATA_MAIN_CLASS);

//		if (applicationClassName == null) {
//			applicationClassName = getPackageManager().getActivityInfo(
//					new ComponentName(this, getClass()),
//					PackageManager.GET_META_DATA).metaData
//					.getString(JFX_MAIN_ATTRIBUTE);
//		}
		if (applicationClassName != null && applicationClassName.length() > 0) {
			clazz = Class.forName(applicationClassName);
		}
		return clazz;
	}

	private Class resolvePreloaderClass()
			throws NameNotFoundException, ClassNotFoundException {

		Class clazz = null;
//		String className = getPackageManager().getActivityInfo(
//				new ComponentName(this, getClass()),
//				PackageManager.GET_META_DATA).metaData
//				.getString(JFX_PRELOADER_ATTRIBUTE);

        String className = getMetadata().getString(JFX_PRELOADER_ATTRIBUTE);
		if (className != null && className.length() > 0) {
			clazz = Class.forName(className);
		}
		return clazz;
	}
    
    class InternalSurfaceView extends SurfaceView {

        public InternalSurfaceView(Context context) {
            super(context);
            setFocusableInTouchMode(true);
        }

        @Override
        public boolean dispatchTouchEvent(MotionEvent event) {
            onTouchEventNative(event.getAction(), (int) event.getX(), (int) event.getY());
            return true;
        }

        @Override
        public boolean dispatchKeyEvent(KeyEvent event) {
            onKeyEventNative(event.getAction(), event.getKeyCode(), event.getCharacters());
            return true;
        }

        private native void onTouchEventNative(int action, int absx, int absy);

        private native void onKeyEventNative(int action, int keycode, String characters);

    }
}
