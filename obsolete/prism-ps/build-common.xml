<?xml version="1.0" encoding="UTF-8"?>
<project name="prism-ps-common" default="jar" basedir=".">

  <property name="jsl.dir" value="jsl"/>
  <property name="es2.shader.dir" value="../prism-es2/build/gensrc/com/sun/prism/es2/glsl"/>
  <property name="d3d.shader.dir" value="../prism-d3d/build/gensrc/com/sun/prism/d3d/hlsl"/>
  <property name="base.dir" value="${basedir}"/>

  <path id="jsl.compiler.class.path">
    <fileset dir="${rt.dist.root.dir}/decora-compiler/dist">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${import.antlr.lib}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement location="${build.classes.dir}"/>
  </path>

  <target name="compile-jsl-compiler">
    <available property="jsl.compiler.exists" file="${rt.dist.root.dir}/decora-compiler/dist/decora-compiler.jar"/>
    <fail unless="jsl.compiler.exists">Must build decora-compiler first!</fail>
    <javac srcdir="shadergen" destdir="build/shadergen" classpathref="jsl.compiler.class.path"
           includeantruntime="no"/>
    <copy todir="build/shadergen">
      <fileset dir="shadergen" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="do-compile-jsl" unless="jsl.sources.uptodate">
    <java fork="false" classname="${jsl.classname}" failonerror="true">
      <classpath>
        <path refid="jsl.compiler.class.path"/>
        <pathelement path="build/shadergen"/>
      </classpath>
      <arg value="-i"/>
      <arg value="${basedir}/jsl"/>
      <arg value="-o"/>
      <arg value="${basedir}/.."/>
      <arg value="-pkg"/>
      <arg value="com/sun/prism"/>
      <arg value="-d3d"/>
      <arg value="-es2"/>
    </java>
  </target>

  <target name="-local-pre-init">
    <mkdir dir="build/gensrc"/>
    <mkdir dir="build/shadergen"/>

    <!-- Calls CompileJSL (or variant) if generated files are not uptodate -->
    <macrodef name="compile-jsl">
      <!-- name of the generator class -->
      <attribute default="CompileJSL" name="classname"/>
      <sequential>
        <uptodate property="es2.jsl.sources.uptodate"
                  targetfile="${es2.shader.dir}/Solid_Color.frag">
          <srcfiles dir="${jsl.dir}" includes="*"/>
          <srcfiles dir="shadergen" includes="*"/>
        </uptodate>

        <uptodate property="d3d.jsl.sources.uptodate"
                  targetfile="${d3d.shader.dir}/Solid_Color.hlsl">
          <srcfiles dir="${jsl.dir}" includes="*"/>
          <srcfiles dir="shadergen" includes="*"/>
        </uptodate>

        <condition property="jsl.sources.uptodate">
            <and>
                <istrue value="${es2.jsl.sources.uptodate}"/>
                <istrue value="${d3d.jsl.sources.uptodate}"/>
            </and>
        </condition>

	<echo message="${es2.jsl.sources.uptodate} and ${d3d.jsl.sources.uptodate}=${jsl.sources.uptodate}" />

        <antcall target="do-compile-jsl">
          <param name="jsl.classname" value="@{classname}"/>
        </antcall>
      </sequential>
    </macrodef>
  </target>

  <target name="jar" depends="-local-pre-init,init,compile-jsl-compiler">
    <!-- TODO: force running of CompileJSL if compiler sources were modified (RT-27383)-->
    <compile-jsl/>
    <build-project>
      <addedsrcdirs>
        <pathelement location="build/gensrc"/>
      </addedsrcdirs>
      <addedsrcfiles>
        <fileset dir="build/gensrc" excludes="${build.classes.excludes}"/>
      </addedsrcfiles>
    </build-project>
  </target>

</project>
