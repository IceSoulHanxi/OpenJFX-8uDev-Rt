/*
 * Copyright (c) 2013, 2014, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package com.sun.glass.ui.monocle.input;

import javafx.animation.AnimationTimer;
import javafx.application.Platform;
import javafx.geometry.Rectangle2D;
import javafx.stage.Screen;
import org.junit.Assert;
import org.junit.Assume;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import java.util.concurrent.CountDownLatch;

/**
 * Test for events generated by the NTrig drivers
 */
public class NTrigTest extends TouchTestBase {

    @Before
    public void createDevice() throws Exception {
        ui = new UInput();
        TestApplication.showFullScreenScene();
        TestApplication.addMouseListeners();
        TestApplication.addTouchListeners();
        TestLog.reset();
        ui.processLine("OPEN");
        ui.processLine("EVBIT EV_SYN");
        ui.processLine("EVBIT EV_KEY");
        ui.processLine("KEYBIT BTN_TOUCH");
        ui.processLine("EVBIT EV_ABS");
        ui.processLine("ABSBIT ABS_X");
        ui.processLine("ABSBIT ABS_Y");
        ui.processLine("ABSBIT ABS_MT_POSITION_X");
        ui.processLine("ABSBIT ABS_MT_POSITION_Y");
        ui.processLine("ABSBIT ABS_MT_ORIENTATION");
        ui.processLine("ABSBIT ABS_MT_TOUCH_MAJOR");
        ui.processLine("ABSBIT ABS_MT_TOUCH_MINOR");
        ui.processLine("ABSMIN ABS_X 0");
        ui.processLine("ABSMAX ABS_X 4095");
        ui.processLine("ABSMIN ABS_Y 0");
        ui.processLine("ABSMAX ABS_Y 4095");
        ui.processLine("ABSMIN ABS_MT_POSITION_X 0");
        ui.processLine("ABSMAX ABS_MT_POSITION_X 4095");
        ui.processLine("ABSMIN ABS_MT_POSITION_Y 0");
        ui.processLine("ABSMAX ABS_MT_POSITION_Y 4095");
        ui.processLine("ABSMIN ABS_MT_ORIENTATION 0");
        ui.processLine("ABSMAX ABS_MT_ORIENTATION 1");
        ui.processLine("PROPBIT INPUT_PROP_POINTER");
        ui.processLine("PROPBIT INPUT_PROP_DIRECT");
        ui.processLine("PROPERTY ID_INPUT_TOUCHSCREEN 1");
        ui.processLine("CREATE");

    }

    /**
     * Touch down and up
     */
    @Test
    public void tap() throws Exception {
        Rectangle2D r = Screen.getPrimary().getBounds();
        final int width = (int) r.getWidth();
        final int height = (int) r.getHeight();
        final int x = Math.round(width * 0.5f);
        final int y = Math.round(height * 0.5f);
        // tap
        ui.processLine("EV_ABS ABS_X 2048");
        ui.processLine("EV_ABS ABS_Y 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 2048");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_KEY BTN_TOOL_DOUBLETAP 1");
        ui.processLine("EV_KEY BTN_TOUCH 1");
        // release
        ui.processLine("EV_SYN SYN_REPORT 0");
        ui.processLine("EV_KEY BTN_TOOL_DOUBLETAP 0");
        ui.processLine("EV_KEY BTN_TOUCH 0 ");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse pressed: "
                + x + ", " + y, 3000);
        TestLog.waitForLog("Mouse released: "
                + x + ", " + y, 3000);
        TestLog.waitForLog("Touch pressed: "
                + x + ", " + y, 3000);
        TestLog.waitForLog("Touch released: "
                + x + ", " + y, 3000);
    }

    /**
     * Touch down, small move, move back, touch up
     */
    @Test
    public void tapWithSmallDrag() throws Exception {
        Rectangle2D r = Screen.getPrimary().getBounds();
        final int width = (int) r.getWidth();
        final int height = (int) r.getHeight();
        final int x = Math.round(width * 0.5f);
        final int y = Math.round(height * 0.5f);
        // tap
        ui.processLine("EV_ABS ABS_X 2048");
        ui.processLine("EV_ABS ABS_Y 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 2048");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_KEY BTN_TOOL_DOUBLETAP 1");
        ui.processLine("EV_KEY BTN_TOUCH 1");
        // move
        int newAbsX = 2048 + Math.max(1, 4096 / width);
        int newAbsY = 2048 + Math.max(1, 4096 / height);
        ui.processLine("EV_SYN SYN_REPORT 0");
        ui.processLine("EV_ABS ABS_X " + newAbsX);
        ui.processLine("EV_ABS ABS_Y " + newAbsY);
        ui.processLine("EV_ABS ABS_MT_POSITION_X " + newAbsX);
        ui.processLine("EV_ABS ABS_MT_POSITION_Y " + newAbsY);
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        // move back
        ui.processLine("EV_ABS ABS_X 2048");
        ui.processLine("EV_ABS ABS_Y 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 2048");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        // release
        ui.processLine("EV_KEY BTN_TOOL_DOUBLETAP 0");
        ui.processLine("EV_KEY BTN_TOUCH 0 ");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse pressed: "
                + x + ", " + y, 3000);
        TestLog.waitForLog("Mouse released: "
                + x + ", " + y, 3000);
        TestLog.waitForLog("Touch pressed: "
                + x + ", " + y, 3000);
        TestLog.waitForLog("Touch released: "
                + x + ", " + y, 3000);
    }


    @Test
    public void twoFingerTap() throws Exception {
        Assume.assumeTrue(TestApplication.hasMultitouch());
        Rectangle2D r = Screen.getPrimary().getBounds();
        final int width = (int) r.getWidth();
        final int height = (int) r.getHeight();
        final int x1 = Math.round(width * 0.5f);
        final int y1 = Math.round(height * 0.5f);
        final int x2 = Math.round(width * 0.75f);
        final int y2 = Math.round(height * 0.75f);
        TestLog.reset();
        // first finger
        ui.processLine("EV_ABS ABS_X 2048");
        ui.processLine("EV_ABS ABS_Y 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 2048");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        // second finger
        ui.processLine("EV_ABS ABS_MT_POSITION_X 3072");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 3072");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_KEY BTN_TOUCH 1");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Touch pressed: "
                + x1 + ", " + y1, 3000);
        TestLog.waitForLogContaining("TouchPoint: PRESSED " + x1 + ", " + y1, 3000);
        TestLog.waitForLogContaining("TouchPoint: PRESSED " + x2 + ", " + y2, 3000);
        TestLog.reset();
        // release
        ui.processLine("EV_KEY BTN_TOUCH 0 ");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Touch released: "
                + x1 + ", " + y1, 3000);
    }

    @Test
    @Ignore("RT-35546")
    /** This test follows the sequence described in touch event documentation:
     * 1. Touch the screen with two fingers
     * 2. Move both fingers
     * 3. Touch the screen with a third finger
     * 4. Move all fingers
     * 5. Remove all fingers
     */
    public void touchSequence() throws Exception {
        Assume.assumeTrue(TestApplication.hasMultitouch());
        TestLog.reset();
        Rectangle2D r = Screen.getPrimary().getBounds();
        final int width = (int) r.getWidth();
        final int height = (int) r.getHeight();
        
        final int x1 = Math.round(width * 0.5f);
        final int y1 = Math.round(height * 0.5f);
        final int x2 = Math.round(width * 0.75f);
        final int y2 = Math.round(height * 0.75f);
        final int x3 = Math.round(width * 0.25f);
        final int y3 = Math.round(height * 0.25f);
        	        
    	// first finger
        ui.processLine("EV_ABS ABS_X 2048");
        ui.processLine("EV_ABS ABS_Y 2048");
        ui.processLine("EV_KEY BTN_TOUCH 1");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 2048");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLogContaining("TouchPoint: PRESSED " + x1 + ", " + y1, 3000);
        // add a second finger
        ui.processLine("EV_ABS ABS_X 2048");
        ui.processLine("EV_ABS ABS_Y 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 2048");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 3072");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 3072");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLogContaining("TouchPoint: STATIONARY " + x1 + ", " + y1, 3000);
        TestLog.waitForLogContaining("TouchPoint: PRESSED " + x2 + ", " + y2, 3000);
        // drag both fingers
        for (int i = 1; i < 10; i++) {
            TestLog.reset();
            ui.processLine("EV_ABS ABS_X " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_Y " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_X " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_Y " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
            ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
            ui.processLine("EV_SYN SYN_MT_REPORT 0");
            ui.processLine("EV_ABS ABS_MT_POSITION_X " + (3072 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_Y " + (3072 + i * 100));
            ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
            ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
            ui.processLine("EV_SYN SYN_MT_REPORT 0");
            ui.processLine("EV_SYN SYN_REPORT 0");
            TestLog.waitForLogContaining("TouchPoint: MOVED", 3000);
        }
        for (int i = 8; i >= 0; i--) {
            TestLog.reset();
            ui.processLine("EV_ABS ABS_X " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_Y " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_X " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_Y " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
            ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
            ui.processLine("EV_SYN SYN_MT_REPORT 0");
            ui.processLine("EV_ABS ABS_MT_POSITION_X " + (3072 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_Y " + (3072 + i * 100));
            ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
            ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
            ui.processLine("EV_SYN SYN_MT_REPORT 0");
            ui.processLine("EV_SYN SYN_REPORT 0");
            TestLog.waitForLogContaining("TouchPoint: MOVED", 3000);
        }
        TestLog.waitForLogContaining("TouchPoint: MOVED " + x1 + ", " + y1, 3000);
        TestLog.waitForLogContaining("TouchPoint: MOVED " + x2 + ", " + y2, 3000);
        // add a third finger           
        ui.processLine("EV_ABS ABS_X 2048");
        ui.processLine("EV_ABS ABS_Y 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 2048");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 2048");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 3072");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 3072");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 1024");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 1024");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLogContaining("TouchPoint: STATIONARY " + x1 + ", " + y1, 3000);
        TestLog.waitForLogContaining("TouchPoint: STATIONARY " + x2 + ", " + y2, 3000);
        TestLog.waitForLogContaining("TouchPoint: PRESSED " + x3 + ", " + y3, 3000);
        
        // drag three fingers
        for (int i = 1; i < 10; i++) {
            TestLog.reset();
            ui.processLine("EV_ABS ABS_X " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_Y " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_X " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_Y " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
            ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
            ui.processLine("EV_SYN SYN_MT_REPORT 0");
            ui.processLine("EV_ABS ABS_MT_POSITION_X " + (3072 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_Y " + (3072 + i * 100));
            ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
            ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
            ui.processLine("EV_SYN SYN_MT_REPORT 0");
            ui.processLine("EV_ABS ABS_MT_POSITION_X " + (1024 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_Y " + (1024 + i * 100));
            ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
            ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
            ui.processLine("EV_SYN SYN_MT_REPORT 0");
            ui.processLine("EV_SYN SYN_REPORT 0");
            TestLog.waitForLogContaining("TouchPoint: MOVED", 3000);
        }
        for (int i = 8; i >= 0; i--) {
            TestLog.reset();
            ui.processLine("EV_ABS ABS_X " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_Y " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_X " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_Y " + (2048 + i * 100));
            ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
            ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
            ui.processLine("EV_SYN SYN_MT_REPORT 0");
            ui.processLine("EV_ABS ABS_MT_POSITION_X " + (3072 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_Y " + (3072 + i * 100));
            ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
            ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
            ui.processLine("EV_SYN SYN_MT_REPORT 0");
            ui.processLine("EV_ABS ABS_MT_POSITION_X " + (1024 + i * 100));
            ui.processLine("EV_ABS ABS_MT_POSITION_Y " + (1024 + i * 100));
            ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
            ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
            ui.processLine("EV_SYN SYN_MT_REPORT 0");
            ui.processLine("EV_SYN SYN_REPORT 0");
            TestLog.waitForLogContaining("TouchPoint: MOVED", 3000);
        }
        TestLog.waitForLogContaining("TouchPoint: MOVED " + x1 + ", " + y1, 3000);
        TestLog.waitForLogContaining("TouchPoint: MOVED " + x2 + ", " + y2, 3000);
        TestLog.waitForLogContaining("TouchPoint: MOVED " + x3 + ", " + y3, 3000);
        
        //release first finger
        TestLog.reset();
        ui.processLine("EV_ABS ABS_X 3072");
        ui.processLine("EV_ABS ABS_Y 3072");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 3072");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 3072");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 1024");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 1024");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLogContaining("Touch released: " + x1 + ", " + y1, 3000);
        TestLog.waitForLogContaining("TouchPoint: RELEASED " + x1 + ", " + y1, 3000);
        TestLog.waitForLogContaining("TouchPoint: STATIONARY " + x2 + ", " + y2, 3000);
        TestLog.waitForLogContaining("TouchPoint: STATIONARY " + x3 + ", " + y3, 3000);
        //release second finger
        TestLog.reset();
        ui.processLine("EV_ABS ABS_X 1024");
        ui.processLine("EV_ABS ABS_Y 1024");
        ui.processLine("EV_ABS ABS_MT_POSITION_X 1024");
        ui.processLine("EV_ABS ABS_MT_POSITION_Y 1024");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLogContaining("Touch released: " + x2 + ", " + y2, 3000);
        TestLog.waitForLogContaining("TouchPoint: RELEASED " + x2 + ", " + y2, 3000);
        TestLog.waitForLogContaining("TouchPoint: STATIONARY " + x3 + ", " + y3, 3000);
        //release third finger
        ui.processLine("EV_KEY BTN_TOUCH 0 ");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Touch released: " + x3 + ", " + y3, 3000);
        TestLog.waitForLogContaining("TouchPoint: RELEASED " + x3 + ", " + y3, 3000);
    }

    /** 20 quick taps */
    @Test
    public void tapTwentyTimes() throws Exception {
        for (int i = 0; i < 20; i++) {
            ui.processLine("EV_ABS ABS_X 2048");
            ui.processLine("EV_ABS ABS_Y 2048");
            ui.processLine("EV_KEY BTN_TOUCH 1");
            ui.processLine("EV_ABS ABS_MT_POSITION_X 2048");
            ui.processLine("EV_ABS ABS_MT_POSITION_Y 2048");
            ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
            ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
            ui.processLine("EV_SYN SYN_MT_REPORT 0");
            ui.processLine("EV_SYN SYN_REPORT 0");
            TestLog.waitForLogContaining("TouchPoint: PRESSED", 3000);
            TestLog.waitForLogContaining("Mouse pressed", 3000);
            ui.processLine("EV_KEY BTN_TOUCH 0 ");
            ui.processLine("EV_SYN SYN_REPORT 0");
        }
        TestRunnable.invokeAndWaitUntilSuccess(() -> {
            Assert.assertEquals(20, TestLog.countLogContaining("TouchPoint: PRESSED"));
            Assert.assertEquals(20, TestLog.countLogContaining("TouchPoint: RELEASED"));
            Assert.assertEquals(20, TestLog.countLogContaining("Mouse pressed"));
            Assert.assertEquals(20, TestLog.countLogContaining("Mouse released"));
            Assert.assertEquals(20, TestLog.countLogContaining("Mouse clicked"));
        }, 3000);
    }

    /** 20 quick taps while the application thread is busy */
    @Test
    public void tapTwentyTimesUnderStress() throws Exception {
        final CountDownLatch latch = new CountDownLatch(1);
        // throttle the application thread
        final AnimationTimer a = new AnimationTimer() {
            @Override
            public void handle(long now) {
                long end = now + 50000000; // 50 ms
                latch.countDown();
                while (System.nanoTime() < end) { } // spin
            }
        };
        Platform.runLater(() -> { a.start(); });
        latch.await();
        try {
            for (int i = 0; i < 20; i++) {
                ui.processLine("EV_ABS ABS_X 2048");
                ui.processLine("EV_ABS ABS_Y 2048");
                ui.processLine("EV_KEY BTN_TOUCH 1");
                ui.processLine("EV_ABS ABS_MT_POSITION_X 2048");
                ui.processLine("EV_ABS ABS_MT_POSITION_Y 2048");
                ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 635");
                ui.processLine("EV_ABS ABS_MT_TOUCH_MINOR 533");
                ui.processLine("EV_SYN SYN_MT_REPORT 0");
                ui.processLine("EV_SYN SYN_REPORT 0");
                TestLog.waitForLogContaining("TouchPoint: PRESSED", 3000);
                TestLog.waitForLogContaining("Mouse pressed", 3000);
                ui.processLine("EV_KEY BTN_TOUCH 0 ");
                ui.processLine("EV_SYN SYN_REPORT 0");
            }
            TestRunnable.invokeAndWaitUntilSuccess(() -> {
                Assert.assertEquals(20, TestLog.countLogContaining("TouchPoint: PRESSED"));
                Assert.assertEquals(20, TestLog.countLogContaining("TouchPoint: RELEASED"));
                Assert.assertEquals(20, TestLog.countLogContaining("Mouse pressed"));
                Assert.assertEquals(20, TestLog.countLogContaining("Mouse released"));
                Assert.assertEquals(20, TestLog.countLogContaining("Mouse clicked"));
            }, 10000);
        } finally {
            Platform.runLater(() -> { a.stop(); });
        }
    }
}

