/*
 * Copyright (c) 2013, 2014, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package com.sun.glass.ui.monocle.input;

import javafx.geometry.Rectangle2D;
import javafx.stage.Screen;
import org.junit.Assume;
import org.junit.Before;
import org.junit.Test;

/**
 * Test for events generated by the SamsungLMS700KF07004 drivers
 */
public class SamsungLMS700KF07004Test extends TouchTestBase {

    @Before
    public void createDevice() throws Exception {
        TestApplication.showFullScreenScene();
        TestApplication.addMouseListeners();
        TestApplication.addTouchListeners();
	
	    ui.processLine("OPEN");
        ui.processLine("EVBIT EV_SYN");
        ui.processLine("EVBIT EV_KEY");
        ui.processLine("KEYBIT BTN_TOUCH");
        ui.processLine("KEYBIT BTN_TOOL_PEN");
        ui.processLine("EVBIT EV_ABS");
        ui.processLine("ABSBIT ABS_X");
        ui.processLine("ABSBIT ABS_Y");
        ui.processLine("ABSMIN ABS_X 0");
        ui.processLine("ABSMAX ABS_X 4095");
        ui.processLine("ABSMIN ABS_Y 0");
        ui.processLine("ABSMAX ABS_Y 4095");
        ui.processLine("PROPBIT INPUT_PROP_POINTER");
        ui.processLine("PROPBIT INPUT_PROP_DIRECT");
        ui.processLine("PROPERTY ID_INPUT_TABLET 1");
        ui.processLine("PROPERTY ID_VENDOR eGalax_Inc.");
        ui.processLine("PROPERTY ID_VENDOR_ID 0x0eef");
        ui.processLine("PROPERTY ID_VENDOR_ENC eGalax");
        ui.processLine("PROPERTY ID_BUS usb");
        ui.processLine("PROPERTY ID_INPUT 1");
        ui.processLine("PROPERTY ID_MODEL Touch");
        ui.processLine("PROPERTY ID_MODEL_ENC Touch");
        ui.processLine("PROPERTY ID_MODEL_ID 0001");
        ui.processLine("PROPERTY ID_REVISION 0100");
        ui.processLine("PROPERTY ID_SERIAL eGalax_Inc._Touch");
        ui.processLine("PROPERTY ID_TYPE hid");
        ui.processLine("PROPERTY ID_USB_DRIVER usbhid");
        ui.processLine("PROPERTY ID_MODEL_ID 0001");
        ui.processLine("PROPERTY ID_REVISION 0100");
        ui.processLine("PROPERTY ID_USB_INTERFACES :030000:");
        ui.processLine("PROPERTY ID_USB_INTERFACE_NUM 00");
        ui.processLine("PROPERTY MAJOR 13");
        ui.processLine("PROPERTY MINOR 65");
        ui.processLine("PROPERTY SUBSYSTEM input");
        ui.processLine("CREATE");
        setAbsScale(4096, 4096);
    }

    /**
     * 1. Touch down
     * 2. Move (by updating "y" coordinate only)
     * 3. Move back (by updating "y" coordinate only)
     * 4. Release
     */
    @Test
    public void tap() throws Exception {
        Assume.assumeTrue(!TestApplication.isLens()); // RT-34806
        Rectangle2D r = Screen.getPrimary().getBounds();
        final int width = (int) r.getWidth();
        final int height = (int) r.getHeight();
        final int x1 = Math.round(width * 0.25f);
        final int y1 = Math.round(height * 0.25f);
        final int y2 = Math.round(height * 0.5f);
    	TestLog.reset();
        // tap
        ui.processLine("EV_KEY BTN_TOUCH 1");
        ui.processLine("EV_KEY BTN_TOOL_PEN 1");
        ui.processLine("EV_ABS ABS_X 1024");
        ui.processLine("EV_ABS ABS_Y 1024");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse pressed: " + x1 + ", " + y1, 3000);

        //move (by changing y only)
        ui.processLine("EV_ABS ABS_Y 2048");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse dragged: " + x1 + ", " + y2, 3000);

        //move back (by changing y only)
        ui.processLine("EV_ABS ABS_Y 1024");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse dragged: " + x1 + ", " + y1, 3000);

        // release
        ui.processLine("EV_KEY BTN_TOUCH 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse released: "+ x1+ ", " + y1, 3000);
    }
}

