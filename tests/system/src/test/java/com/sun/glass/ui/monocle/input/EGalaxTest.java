/*
 * Copyright (c) 2013, 2014, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package com.sun.glass.ui.monocle.input;

import org.junit.Assert;
import org.junit.Assume;
import org.junit.Before;
import org.junit.Test;

/**
 * Test for events generated by the EGalax drivers
 */
public class EGalaxTest extends TouchTestBase {

    @Before
    public void createDevice() throws Exception {
        TestApplication.showFullScreenScene();
        TestApplication.addMouseListeners();
        TestApplication.addTouchListeners();
        TestLog.reset();
        ui.processLine("OPEN");
        ui.processLine("EVBIT EV_SYN");
        ui.processLine("ABSBIT ABS_MT_TRACKING_ID");
        ui.processLine("ABSBIT ABS_MT_POSITION_X");
        ui.processLine("ABSBIT ABS_MT_POSITION_Y");
        ui.processLine("ABSBIT ABS_MT_TOUCH_MAJOR");
        ui.processLine("ABSMIN ABS_MT_TRACKING_ID 0");
        ui.processLine("ABSMAX ABS_MT_TRACKING_ID 5");
        ui.processLine("ABSMIN ABS_MT_POSITION_X 0");
        ui.processLine("ABSMAX ABS_MT_POSITION_X 32767");
        ui.processLine("ABSMIN ABS_MT_POSITION_Y 0");
        ui.processLine("ABSMAX ABS_MT_POSITION_Y 32767");
        ui.processLine("ABSMIN ABS_MT_TOUCH_MAJOR 0");
        ui.processLine("ABSMAX ABS_MT_TOUCH_MAJOR 255");
        ui.processLine("PROPBIT INPUT_PROP_POINTER");
        ui.processLine("PROPBIT INPUT_PROP_DIRECT");
        ui.processLine("PROPERTY ID_INPUT_TOUCHSCREEN 1");
        ui.processLine("CREATE");
        setAbsScale(32768, 32768);
    }

    /**
     * Touch down and up
     */
    @Test
    public void tap() throws Exception {
        final int x = (int) Math.round(screen.getWidth() / 2.0);
        final int y = (int) Math.round(screen.getHeight() / 2.0);
        // tap
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x, y);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse pressed: "
                + x + ", " + y, 3000l);
        TestLog.waitForLog("Touch pressed: "
                + x + ", " + y, 3000l);
        // release
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 0");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse released: "
                + x + ", " + y, 3000l);
        TestLog.waitForLog("Mouse clicked: "
                + x + ", " + y, 3000l);
        TestLog.waitForLog("Touch released: "
                + x + ", " + y, 3000l);
    }

    /**
     * Touch down and up, with a hold in the middle
     */
    @Test
    public void tapHoldRelease() throws Exception {
        final int x = (int) Math.round(screen.getWidth() / 2.0);
        final int y = (int) Math.round(screen.getHeight() / 2.0);
        // tap
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x, y);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse pressed: "
                + x + ", " + y, 3000l);
        TestLog.waitForLog("Touch pressed: "
                + x + ", " + y, 3000l);
        TestLog.reset();
        // this screen sometimes sends repeat events in the same location. We
        // don't have anything sensible to do with these events, so make sure
        // they are filtered out.
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x, y);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        Thread.sleep(500);
        Assert.assertEquals(0, TestLog.countLogContaining("Mouse pressed:"));
        Assert.assertEquals(0, TestLog.countLogContaining("Touch pressed:"));
        // release
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 0");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse released: "
                + x + ", " + y, 3000l);
        TestLog.waitForLog("Mouse clicked: "
                + x + ", " + y, 3000l);
        TestLog.waitForLog("Touch released: "
                + x + ", " + y, 3000l);
    }

    /**
     * Touch down and up, with a small move in the middle
     */
    @Test
    public void tapSmallDragRelease() throws Exception {
        final int x = (int) Math.round(screen.getWidth() / 2.0);
        final int y = (int) Math.round(screen.getHeight() / 2.0);
        final int tapRadius = Integer.getInteger("lens.input.touch.TapRadius", 20);
        final int x1 = x + tapRadius / 2;
        final int x2 = x + tapRadius * 2;
        // tap
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x, y);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse pressed: "
                + x + ", " + y, 3000l);
        TestLog.waitForLog("Touch pressed: "
                + x + ", " + y, 3000l);
        TestLog.reset();
        // drag within tap radius
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x1, y);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        // drag beyond tap radius
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x2, y);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse dragged: " + x2 + ", " + y, 3000l);
        TestLog.waitForLog("Touch moved: " + x2 + ", " + y, 3000l);
        Assert.assertEquals(1, TestLog.countLogContaining("Mouse dragged:"));
        Assert.assertEquals(1, TestLog.countLogContaining("Touch moved:"));
        // release
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 0");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse released: " + x2 + ", " + y, 3000l);
        TestLog.waitForLog("Touch released: " + x2 + ", " + y, 3000l);
    }

    /**
     * Touch down two fingers, release first, release second
     */
    @Test
    public void pressTwoFingersReleaseOne() throws Exception {
        Assume.assumeTrue(TestApplication.hasMultitouch());
        final int x1 = (int) Math.round(screen.getWidth() / 8.0);
        final int y1 = (int) Math.round(screen.getHeight() / 8.0);
        final int x2 = (int) Math.round(screen.getWidth() / 5.0);
        final int y2 = (int) Math.round(screen.getHeight() / 5.0);
        final int x3 = (int) Math.round(screen.getWidth() / 3.0);
        final int y3 = (int) Math.round(screen.getHeight() / 3.0);

        TestLog.reset();
        //press first finger
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x1, y1);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");       
        //add a second finger
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 1");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x2, y2);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse pressed: " + x1 + ", " + y1, 3000l);
        TestLog.waitForLog("Touch pressed: " + x1 + ", " + y1, 3000l);
        TestLog.waitForLogContaining("TouchPoint: PRESSED " + x1 + ", " + y1, 3000l);
        TestLog.waitForLogContaining("TouchPoint: PRESSED " + x2 + ", " + y2, 3000l);
        TestLog.waitForLog("Touch pressed: " + x2 + ", " + y2, 3000l);

        //release one finger
        TestLog.reset();
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 0");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Touch released: " + x1 + ", " + y1, 3000l);
        TestLog.waitForLogContaining("TouchPoint: RELEASED " + x1 + ", " + y1, 3000l);
        TestLog.waitForLogContaining("TouchPoint: STATIONARY " + x2 + ", " + y2, 3000l);

        TestLog.reset();
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 1");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x3, y3);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLog("Mouse dragged: " + x3 + ", " + y3, 3000l);

        //release second finger
        TestLog.reset();
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 1");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 0");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        TestLog.waitForLogContaining("Mouse released: " + x3 + ", " + y3, 3000l);
        TestLog.waitForLogContaining("TouchPoint: RELEASED " + x3 + ", " + y3, 3000l);
    }
   
    /** The test bases on sequence described in touch event documentation,
     * but the sequence is modified for the Freescale SDP screen (that only
     * has two touch points), but is not compliant with the way the screen 
     * sends events, i.e send release + move in same event (actual screen 
     * send them separately) 
     * 1. Touch the screen with two fingers 
     * 2. Move both fingers 
     * 3. Move fingers back 
     * 4. Remove one finger 
     * 5. Remove second finger
     */
    @Test
    public void touchSequence() throws Exception {
        Assume.assumeTrue(TestApplication.hasMultitouch());
        final int x1 = (int) Math.round(screen.getWidth() / 5.0);
        final int y1 = (int) Math.round(screen.getHeight() / 2.0);
        final int x2 = (int) Math.round(screen.getWidth() / 3.0);
        final int y2 = (int) Math.round(screen.getHeight() / 2.0);

        TestLog.reset();
        // first finger
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x1, y1);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");       
        //secod second
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 1");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x2, y2);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        
        TestLog.waitForLog("Mouse pressed: " + x1 + ", " + y1, 3000l);
        TestLog.waitForLog("Touch pressed: " + x1 + ", " + y1, 3000l);
        TestLog.waitForLog("Touch pressed: " + x2 + ", " + y2, 3000l);
        
        //move both fingers
        for (int i = 1; i < 8; i++) {
        	TestLog.reset();
           	int step = i * 50;
        	ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        	ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        	absMTPosition(x1 + step, y1 + step);
        	ui.processLine("EV_SYN SYN_MT_REPORT 0");
        
        	ui.processLine("EV_ABS ABS_MT_TRACKING_ID 1");
        	ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        	absMTPosition(x2 + step, y2 + step);
        	ui.processLine("EV_SYN SYN_MT_REPORT 0");
        	ui.processLine("EV_SYN SYN_REPORT 0");
        	
        	TestLog.waitForLog("Mouse dragged: " + (x1 + step) + ", " 
        		+ (y1 + step), 3000l);
        	TestLog.waitForLog("Touch moved: " + (x1 + step) + ", " 
        		+ (y1 + step), 3000l);
        	TestLog.waitForLog("Touch moved: " + (x2 + step) + ", " 
        		+ (y2 + step), 3000l);
        }
        //move back both fingers
        for (int i = 6; i > -1; i--) {
        	TestLog.reset();
        	int step = i * 50;
        	ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        	ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        	absMTPosition(x1 + step, y1 + step);
        	ui.processLine("EV_SYN SYN_MT_REPORT 0");
        
        	ui.processLine("EV_ABS ABS_MT_TRACKING_ID 1");
        	ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        	absMTPosition(x2 + step, y2 + step);
        	ui.processLine("EV_SYN SYN_MT_REPORT 0");
        	ui.processLine("EV_SYN SYN_REPORT 0");
        	
        	TestLog.waitForLog("Mouse dragged: " + (x1 + step) + ", " 
        		+ (y1 + step), 3000l);
        	TestLog.waitForLog("Touch moved: " + (x1 + step) + ", " 
        		+ (y1 + step), 3000l);
        	TestLog.waitForLog("Touch moved: " + (x2 + step) + ", " 
        		+ (y2 + step), 3000l);
        }
        
        TestLog.waitForLog("Mouse dragged: " + x1 + ", " + y1, 3000l);
        TestLog.waitForLog("Touch moved: " + x1 + ", " + y1, 3000l);
        TestLog.waitForLog("Touch moved: " + x2 + ", " + y2, 3000l);        
               
        //release one finger
        TestLog.reset();
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 0");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");

        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 1");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x2, y2);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        
       
        TestLog.waitForLog("Touch released: " + x1 + ", " + y1, 3000l);
        TestLog.waitForLog("Touch stationary: " + x2 + ", " + y2, 3000l);
        
        //release second finger
        TestLog.reset();
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 1");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 0");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");
        
        TestLog.waitForLog("Mouse released: " + x2 + ", " + y2, 3000l);
        TestLog.waitForLog("Touch released: " + x2 + ", " + y2, 3000l);        
    }

    /** Test that double taps in the same area generate synthesized
     * multi-click mouse events. */
    @Test
    public void testDoubleClick1() throws Exception {
        int x = (int) Math.round(screen.getWidth() / 2.0);
        int y = (int) Math.round(screen.getHeight() / 2.0);
        TestApplication.getStage().getScene().setOnMouseClicked((e) -> {
            TestLog.format("Mouse clicked: %d, %d: clickCount %d",
                           (int) e.getScreenX(), (int) e.getScreenY(),
                           e.getClickCount());
        });
        TestLog.reset();
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x, y);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");

        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 0");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");

        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x, y);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");

        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 0");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");

        TestLog.waitForLog("Mouse clicked: " + x + ", " + y + ": clickCount 1", 3000l);
        TestLog.waitForLog("Mouse clicked: " + x + ", " + y + ": clickCount 2", 3000l);
    }

    @Test
    public void testDoubleClick2() throws Exception {
        int x1 = (int) Math.round(screen.getWidth() / 2.0);
        int y1 = (int) Math.round(screen.getHeight() / 2.0);
        int x2 = x1 + TestApplication.getTapRadius();
        int y2 = y1 + TestApplication.getTapRadius();

        TestApplication.getStage().getScene().setOnMouseClicked((e) -> {
            TestLog.format("Mouse clicked: %d, %d: clickCount %d",
                           (int) e.getScreenX(), (int) e.getScreenY(),
                           e.getClickCount());
        });
        TestLog.reset();
        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x1, y1);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");

        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 0");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");

        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 1");
        absMTPosition(x2, y2);
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");

        ui.processLine("EV_ABS ABS_MT_TRACKING_ID 0");
        ui.processLine("EV_ABS ABS_MT_TOUCH_MAJOR 0");
        ui.processLine("EV_SYN SYN_MT_REPORT 0");
        ui.processLine("EV_SYN SYN_REPORT 0");

        TestLog.waitForLog("Mouse clicked: " + x1 + ", " + y1 + ": clickCount 1", 3000l);
        TestLog.waitForLog("Mouse clicked: " + x2 + ", " + y2 + ": clickCount 2", 3000l);
    }

 }

