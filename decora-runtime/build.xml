<?xml version="1.0" encoding="UTF-8"?>
<project name="decora-runtime" default="jar" basedir=".">
  <description>Builds, tests, and runs the project decora-runtime.</description>

  <import file="../build-defs.xml"/>

  <property name="jsl.dir" value="jsl"/>
  <property name="base.dir" value="${basedir}"/>

  <path id="jsl.compiler.class.path">
    <fileset dir="${rt.dist.root.dir}/decora-compiler/dist">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${import.antlr.lib}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement location="${build.classes.dir}"/>
  </path>

  <target name="compile-jsl-compiler">
    <available property="jsl.compiler.exists" file="${rt.dist.root.dir}/decora-compiler/dist/decora-compiler.jar"/>
    <fail unless="jsl.compiler.exists">Must build decora-compiler first!</fail>
    <javac srcdir="generator" destdir="build/generator" classpathref="jsl.compiler.class.path"
           includeantruntime="no"/>
  </target>

  <target name="do-compile-jsl">
    <echo message="Compiling ${jsl.filename}.jsl using ${jsl.classname} (outputs=${jsl.outputs})"/>
    <java fork="false" classname="${jsl.classname}" failonerror="true">
      <classpath>
        <path refid="jsl.compiler.class.path"/>
        <pathelement path="build/generator"/>
      </classpath>
      <arg value="-i"/>
      <arg value="${basedir}/jsl"/>
      <arg value="-o"/>
      <arg value="${basedir}/.."/>
      <arg value="-pkg"/>
      <arg value="com/sun/scenario/effect"/>
      <arg value="${jsl.outputs}"/>
      <arg value="${jsl.filename}"/>
    </java>
  </target>

  <target name="do-compile-external-jsl">
    <java fork="true" classname="CompileExternal" failonerror="true">
      <classpath>
        <path refid="jsl.compiler.class.path"/>
        <pathelement path="build/generator"/>
      </classpath>
      <arg value="-i"/>
      <arg value="${jsl.inputdir}"/>
      <arg value="-o"/>
      <arg value="${jsl.outputdir}"/>
      <arg value="${jsl.outputs}"/>
      <arg value="${jsl.filename}"/>
    </java>
  </target>

  <target name="-pre-init">
    <mkdir dir="build/gensrc"/>
    <mkdir dir="build/generator"/>

    <!-- Calls CompileJSL (or variant) if generated files are not uptodate -->
    <macrodef name="compile-jsl">
      <!-- name of the generator class (by default uses generic CompileJSL -->
      <attribute default="CompileJSL" name="classname"/>
      <!-- name of the JSL file to be compiled -->
      <attribute default="" name="filename"/>
      <!-- suffix of the generated Java file used for up-to-date check -->
      <attribute default="" name="suffix"/>
      <!-- which output file types to generate -->
      <attribute default="-all" name="outputs"/>
      <sequential>
        <!-- RT-27393
             TODO: Fix the dependencies.  For now we always call the
             compile program, but it has been modified to only generate
             outputs that are out of date.  This saves a lot of work but
             is not quite as fast as if we could measure the dependencies
             here and avoid running the program at all. -->
        <uptodate property="@{classname}.@{filename}.uptodate"
                  targetfile="NONEXISTANTFILE">
          <srcfiles dir="${jsl.dir}" includes="@{filename}*.jsl" />
        </uptodate>
        <antcall target="do-compile-jsl">
          <param name="jsl.classname" value="@{classname}"/>
          <param name="jsl.filename" value="@{filename}"/>
          <param name="jsl.outputs" value="@{outputs}"/>
        </antcall>
      </sequential>
    </macrodef>

    <macrodef name="compile-test-jsl">
      <attribute default="" name="filename"/>
      <sequential>
        <antcall target="do-compile-external-jsl">
          <param name="jsl.filename" value="@{filename}"/>
          <param name="jsl.inputdir" value="./testjsl"/>
          <param name="jsl.outputdir" value="../decora-jsw/build/test/gensrc"/>
          <param name="jsl.outputs" value="-sw"/>
        </antcall>
      </sequential>
    </macrodef>
  </target>

  <!-- RT-27383 TODO: force running of CompileJSL if compiler sources were modified -->
  <target name="jar" depends="init">
    <build-project/>
    <antcall target="compile-jsl-compiler"/>
    <compile-jsl filename="ColorAdjust"/>
    <compile-jsl filename="Brightpass"/>
    <compile-jsl filename="SepiaTone"/>
    <compile-jsl filename="PerspectiveTransform"/>
    <compile-jsl filename="DisplacementMap"/>
    <compile-jsl filename="InvertMask"/>
    <compile-jsl classname="CompileBlend" filename="Blend" suffix="_ADD"/>
    <compile-jsl classname="CompilePhong" filename="PhongLighting" suffix="_POINT"/>
    <compile-jsl classname="CompileLinearConvolve" filename="LinearConvolve" outputs="-hw"/>
    <compile-jsl classname="CompileLinearConvolve" filename="LinearConvolveShadow" outputs="-hw"/>
    <!--<compile-jsl classname="CompileZoomRadialBlur" filename="ZoomRadialBlur"/>-->

    <!-- force compilation of generated effect peer sources -->
    <build-project/>
  </target>

  <!-- We're currently relying on the generated sources under
       decora-j2d-rsl/build/gensrc to determine whether the JSL files need to
       be recompiled, so for now always clean the decora-j2d-rsl/build
       directory after cleaning decora-runtime... -->
  <target name="clean">
    <clean-project/>
    <delete dir="../decora-j2d-rsl/build"/>
  </target>

  <target name="test" depends="jar">
    <mkdir dir="build/test/gensrc"/>
    <!-- for now we'll output the jsw peers into decora-jsw since we're not
         concerned with building the generated peers (all we care about is
         compiling the JSL files) -->
    <mkdir dir="../decora-jsw/build/test/gensrc"/>
    <compile-test-jsl filename="Test1"/>
    <compile-test-jsl filename="Test2"/>
    <test-project/>
  </target>

</project>
